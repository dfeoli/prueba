name: Validar push KiCad

on:
  push:

jobs:
  validar_push:
    runs-on: ubuntu-latest
    steps:
      - name: Configurar Git
        run: |
          git fetch --prune --unshallow || true

      - name: Obtener lista de commits del push
        id: commits
        run: |
          # Obtener el rango de commits entre el push y el remoto
          if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
            # Primer push del repo
            echo "commits=$(git rev-list HEAD)" >> $GITHUB_OUTPUT
          else
            echo "commits=$(git rev-list ${{ github.event.before }}..${{ github.sha }})" >> $GITHUB_OUTPUT
          fi

      - name: Obtener lista de archivos modificados
        id: files
        run: |
          FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
          echo "archivos=$FILES" >> $GITHUB_OUTPUT

      - name: Validar push
        run: |
          ADMIN="dfeoli" # reemplazar con el usuario del administrador del repo
          AUTHOR="${{ github.actor }}"

          # Si es admin, pasa automáticamente
          if [ "$AUTHOR" = "$ADMIN" ]; then
            echo "Usuario admin, push permitido."
            exit 0
          fi

          # Convertir archivos a array
          FILE_ARRAY=(${{ steps.files.outputs.archivos }})

          # Filtrar archivos ignorados según .gitignore
          IGNORED=$(git check-ignore "${FILE_ARRAY[@]}" || true)
          VALID_FILES=()
          for f in "${FILE_ARRAY[@]}"; do
            if ! echo "$IGNORED" | grep -qx "$f"; then
              VALID_FILES+=("$f")
            fi
          done

          # Validar cantidad de archivos modificados
          if [ ${#VALID_FILES[@]} -ne 1 ]; then
            echo "Error: Solo se permite modificar un archivo."
            exit 1
          fi

          # Validar extensión del archivo
          FILE="${VALID_FILES[0]}"
          if [[ "$FILE" != *.kicad_sch ]]; then
            echo "Error: El archivo modificado debe tener extensión .kicad_sch"
            exit 1
          fi

          echo "Push válido."
